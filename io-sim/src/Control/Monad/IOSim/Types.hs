{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DerivingVia #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Control.Monad.IOSim.Types where

import           Control.Exception (SomeException)
import           Control.Monad.Class.MonadTime
import           Data.Dynamic (Dynamic)
import           GHC.Generics (Generic)
import           Quiet (Quiet (..))

-- | 'Trace' is a recursive data type, it is the trace of a 'IOSim' computation.
-- The trace will contain information about thread sheduling, blocking on
-- 'TVar's, and other internal state changes of 'IOSim'.  More importantly it
-- also supports traces generated by the computation with 'say' (which
-- corresponds to using 'putStrLn' in 'IO'), 'traceEventM', or dynamically typed
-- traces with 'traceM' (which generalise the @base@ library
-- 'Debug.Trace.traceM')
--
-- It also contains information on races discovered.
--
-- See also: 'traceEvents', 'traceResult', 'selectTraceEvents',
-- 'selectTraceEventsDynamic' and 'printTraceEventsSay'.
--
data Trace a = Trace !Time !ThreadId !(Maybe ThreadLabel) !TraceEvent (Trace a)
             | TraceRacesFound    [ScheduleControl]                   (Trace a)
             | TraceMainReturn    !Time a             ![Labelled ThreadId]
             | TraceMainException !Time SomeException ![Labelled ThreadId]
             | TraceDeadlock      !Time               ![Labelled ThreadId]
             | TraceLoop
  deriving Show

data TraceEvent
  = EventSay  String
  | EventLog  Dynamic

  | EventThrow          SomeException
  | EventThrowTo        SomeException ThreadId -- This thread used ThrowTo
  | EventThrowToBlocked                        -- The ThrowTo blocked
  | EventThrowToWakeup                         -- The ThrowTo resumed
  | EventThrowToUnmasked (Labelled ThreadId)   -- A pending ThrowTo was activated

  | EventThreadForked    ThreadId
  | EventThreadFinished                  -- terminated normally
  | EventThreadUnhandled SomeException   -- terminated due to unhandled exception

  | EventTxCommitted   [Labelled TVarId] -- tx wrote to these
                       [TVarId]          -- and created these
  | EventTxAborted
  | EventTxBlocked     [Labelled TVarId] -- tx blocked reading these
  | EventTxWakeup      [Labelled TVarId] -- changed vars causing retry

  | EventTimerCreated   TimeoutId TVarId Time
  | EventTimerUpdated   TimeoutId        Time
  | EventTimerCancelled TimeoutId
  | EventTimerExpired   TimeoutId
  deriving Show

data ThreadId = ThreadId  [Int]
              | TestThreadId [Int]    -- test threads have higher priority
  deriving (Eq, Ord, Show)

childThreadId :: ThreadId -> Int -> ThreadId
childThreadId (ThreadId     is) i = ThreadId     (is ++ [i])
childThreadId (TestThreadId is) i = TestThreadId (is ++ [i])

setNonTestThread :: ThreadId -> ThreadId
setNonTestThread (TestThreadId is) = ThreadId is
setNonTestThread tid@ThreadId{}    = tid

newtype TVarId      = TVarId    Int   deriving (Eq, Ord, Enum, Show)
newtype TimeoutId   = TimeoutId Int   deriving (Eq, Ord, Enum, Show)
newtype ClockId     = ClockId   [Int] deriving (Eq, Ord, Show)

unTimeoutId :: TimeoutId -> Int
unTimeoutId (TimeoutId a) = a

type ThreadLabel = String
type TVarLabel   = String

data Labelled a = Labelled {
    l_labelled :: !a,
    l_label    :: !(Maybe String)
  }
  deriving (Eq, Ord, Generic)
  deriving Show via Quiet (Labelled a)

---
--- Schedules
---

data ScheduleControl = ControlDefault
                     | ControlAwait [ScheduleMod]
                     | ControlFollow [StepId] [ScheduleMod]
  deriving (Eq, Ord, Show)

data ScheduleMod = ScheduleMod{
    scheduleModTarget    :: StepId,   -- when we reach this step
    scheduleModControl   :: ScheduleControl,
                                      -- which happens with this control
    scheduleModInsertion :: [StepId]  -- we should instead perform this sequence
                                      -- this *includes* the target step,
                                      -- not necessarily as the last step.
  }
  deriving (Eq, Ord)

type StepId = (ThreadId, Int)

instance Show ScheduleMod where
  showsPrec d (ScheduleMod tgt ctrl insertion) =
    showParen (d>10) $
      showString "ScheduleMod " .
      showsPrec 11 tgt .
      showString " " .
      showsPrec 11 ctrl .
      showString " " .
      showsPrec 11 insertion

